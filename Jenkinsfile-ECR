@Library('my-shared-lib') _
pipeline{
    agent any

    parameters{
        choice(name: 'action', choices: 'create\ndelete', description: 'choose create/destory')
        string(name: 'aws_account_id', description: 'name of the AWS Account ID', defaultValue: '581907405949')
        string(name: 'aws_region', description: 'name of The Region', defaultValue: 'ap-south-1')
        string(name: 'aws_reponame', description: 'name of the ECR', defaultValue: 'gangadharbsk')
    }

    stages{
        stage('Git Checkout'){
            when { expression { params.action == 'create' } }
            steps{
                gitCheckout(
                    branch: "main",
                    url: "https://github.com/gangadhar-aws/spring_boot.git"
                )
            }
        }

        // stage('Maven Unit Test'){
        //      when { expression { params.action == 'create' } }
        //     steps{
        //         mvnTest()
        //     }
        // }

        // stage('Integration Test Maven'){
        //      when { expression { params.action == 'create' } }
        //     steps{
        //        mavenIntegration()
        //     }
        // }

        // stage('Static Code analysis: Sonarqube'){
        //      when { expression { params.action == 'create' } }
        //     steps{
        //         script{
        //             def SonarQubecredentialsId = 'sonarqube-api'
        //             staticCodeanalysis(SonarQubecredentialsId)
        //         }

        //     }
        // }


        // stage('Qulity Gate status check: sonarqube'){
        //      when { expression { params.action == 'create' } }
        //     steps{
        //         script{
        //             def SonarQubecredentialsId = 'sonarqube-api'
        //             QualityGateStatus(SonarQubecredentialsId)
        //         }

        //     }
        // }


        stage('Maven Build: maven'){
             when { expression { params.action == 'create' } }
            steps{
                script{
                    mvnBuild()
                }

            }
        }

        // image build for ECR
        stage('Docker Image build: ECR'){
             when { expression { params.action == 'create' } }
            steps{
                script{
                     Ecr_docker_build("${params.aws_account_id}", "${params.aws_region}","${params.aws_reponame}")
                }

            }
        }

         // image scan for ECR
        stage('Docker Image Scan: ECR'){
             when { expression { params.action == 'create' } }
            steps{
                script{
                    ECR_docker_imagescan("${params.aws_account_id}", "${params.aws_region}","${params.aws_reponame}")
                }

            }
        }

        // image scan push for ECR
        stage('Docker Image PUSH : ECR'){
             when { expression { params.action == 'create' } }
            steps{
                script{
                    ECR_docker_imagepush("${params.aws_account_id}", "${params.aws_region}","${params.aws_reponame}")
                }

            }
        }

        // Image cleanup

        stage('Docker Image cleanup'){
             when { expression { params.action == 'create' } }
            steps{
                script{
                    ECR_docker_cleanpu("${params.aws_account_id}", "${params.aws_region}","${params.aws_reponame}")
                }

            }
        } 







    }
}